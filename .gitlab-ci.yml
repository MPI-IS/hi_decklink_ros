image: ros:kinetic-ros-core

variables:
  GIT_SUBMODULE_STRATEGY: recursive


before_script:
  - apt-get -qq update > /dev/null
  - apt-get -qq install build-essential cmake python-catkin-tools python3 python3-jinja2> /dev/null

  # Ensure that the ROS commands are available
  - source /opt/ros/kinetic/setup.bash

  # Create a ROS workspace to operate in. 
  # Ideally we would put it somewhere else than the build directory but gitlab requires that all
  # cache artifact paths be under the build directory so we have to resort to these hideous hacks.
  # 
  # We have to use an overly complex find command instead of `mv * ros_src` because you can't move a
  # folder into itself and that causes a non 0 exit status. We could have used an `|| true` but that 
  # would have swallowed every error which is not what we want. 
  # Additionally, we have to use the `__ros_src`  directory that we then remvoe because most repos 
  # will already have a top-level `src/` directory.
  
  - mkdir -p __ros_src/${CI_PROJECT_NAME}
  - find -mindepth 1 -maxdepth 1 \! -name __ros_src \! -name public -exec mv {} __ros_src/${CI_PROJECT_NAME} \;
  - mv __ros_src/ src/

  - catkin init

  # Install dependencies
  - rosdep install --as-root apt:false --default-yes -q --ignore-src --rosdistro kinetic --from-path src/ > /dev/null

# Compile and build the nodes
build-targets:
  stage: build
  script:
    - catkin build --no-status --no-notify

  artifacts:
    paths:
      - build/
      - devel/
      - install/
      - logs/

# Note: since this package is just two nodes and a simple camera driver it doesn't make sense to 
# build the complete `doxygen` docs. The `README` should be enough.
