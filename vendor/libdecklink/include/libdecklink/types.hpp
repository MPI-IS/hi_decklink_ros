/*
 *  WARNING: This file is generated by 'enum2str'. Any changes made here will 
 *  be destroyed next time the tool is run. 
 *
 *  @date: 2018-03-29 15:14:04.298311
 */

#pragma once

#include <string>
#include <array>


#include "decklink_sdk/DeckLinkAPI.h"

namespace DeckLink {

    enum class ImageFormat {
        NTSC = bmdModeNTSC,
        NTSC2398 = bmdModeNTSC2398,
        PAL = bmdModePAL,
        PALp = bmdModePALp,
        HD720p50 = bmdModeHD720p50,
        HD720p5994 = bmdModeHD720p5994,
        HD720p60 = bmdModeHD720p60,
        HD1080p2398 = bmdModeHD1080p2398,
        HD1080p24 = bmdModeHD1080p24,
        HD1080p25 = bmdModeHD1080p25,
        HD1080p2997 = bmdModeHD1080p2997,
        HD1080p30 = bmdModeHD1080p30,
        HD1080i50 = bmdModeHD1080i50,
        HD1080i5994 = bmdModeHD1080i5994,
        HD1080i6000 = bmdModeHD1080i6000,
        HD1080p50 = bmdModeHD1080p50,
        HD1080p5994 = bmdModeHD1080p5994,
        HD1080p6000 = bmdModeHD1080p6000,
        UHD2k2398 = bmdMode2k2398,
        UHD2k24 = bmdMode2k24,
        UHD2k25 = bmdMode2k25,
        UHD2kDCI2398 = bmdMode2kDCI2398,
        UHD2kDCI24 = bmdMode2kDCI24,
        UHD2kDCI25 = bmdMode2kDCI25,
        UHD4k2160p2398 = bmdMode4K2160p2398,
        UHD4k2160p24 = bmdMode4K2160p24,
        UHD4k2160p25 = bmdMode4K2160p25,
        UHD4k2160p2997 = bmdMode4K2160p2997,
        UHD4k2160p30 = bmdMode4K2160p30,
        UHD4k2160p50 = bmdMode4K2160p50,
        UHD4k2160p5994 = bmdMode4K2160p5994,
        UHD4k2160p60 = bmdMode4K2160p60,
        UHD4kDCI2160p2398 = bmdMode4kDCI2398,
        UHD4kDCI2160p24 = bmdMode4kDCI24,
        UHD4kDCI2160p25 = bmdMode4kDCI25,
        Unknown = bmdModeUnknown,
    };
    
    
    /**
     * Convert a std::string to a ImageFormat value.
     *
     * @param value The stringified version of an ImageFormat field to convert back to a ImageFormat.
     * @return The ImageFormat value.
     */
    DeckLink::ImageFormat to_ImageFormat(const std::string & value);

    namespace ImageFormat_ {

        constexpr std::array<ImageFormat, 36> Values{
            ImageFormat::NTSC,
            ImageFormat::NTSC2398,
            ImageFormat::PAL,
            ImageFormat::PALp,
            ImageFormat::HD720p50,
            ImageFormat::HD720p5994,
            ImageFormat::HD720p60,
            ImageFormat::HD1080p2398,
            ImageFormat::HD1080p24,
            ImageFormat::HD1080p25,
            ImageFormat::HD1080p2997,
            ImageFormat::HD1080p30,
            ImageFormat::HD1080i50,
            ImageFormat::HD1080i5994,
            ImageFormat::HD1080i6000,
            ImageFormat::HD1080p50,
            ImageFormat::HD1080p5994,
            ImageFormat::HD1080p6000,
            ImageFormat::UHD2k2398,
            ImageFormat::UHD2k24,
            ImageFormat::UHD2k25,
            ImageFormat::UHD2kDCI2398,
            ImageFormat::UHD2kDCI24,
            ImageFormat::UHD2kDCI25,
            ImageFormat::UHD4k2160p2398,
            ImageFormat::UHD4k2160p24,
            ImageFormat::UHD4k2160p25,
            ImageFormat::UHD4k2160p2997,
            ImageFormat::UHD4k2160p30,
            ImageFormat::UHD4k2160p50,
            ImageFormat::UHD4k2160p5994,
            ImageFormat::UHD4k2160p60,
            ImageFormat::UHD4kDCI2160p2398,
            ImageFormat::UHD4kDCI2160p24,
            ImageFormat::UHD4kDCI2160p25,
            ImageFormat::Unknown,
        };

        std::string pretty_print(ImageFormat value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a ImageFormat to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_ImageFormat
 * 
 * @param value The ImageFormat to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::ImageFormat value);

std::ostream& operator<<(std::ostream& os, const DeckLink::ImageFormat value);

namespace DeckLink {

    enum class PixelFormat {
        Unknown,
        YUV_8Bit = bmdFormat8BitYUV,
        YUV_10Bit = bmdFormat10BitYUV,
        ARGB_8Bit = bmdFormat8BitARGB,
        BGRA_8Bit = bmdFormat8BitBGRA,
        RGB_10Bit = bmdFormat10BitRGB,
        RGB_12Bit = bmdFormat12BitRGB,
        RGBLE_12Bit = bmdFormat12BitRGBLE,
        RGBXLE_10Bit = bmdFormat10BitRGBXLE,
        RGBX_10Bit = bmdFormat10BitRGBX,
        H265 = bmdFormatH265,
        DNxHR = bmdFormatDNxHR,
    };
    
    
    /**
     * Convert a std::string to a PixelFormat value.
     *
     * @param value The stringified version of an PixelFormat field to convert back to a PixelFormat.
     * @return The PixelFormat value.
     */
    DeckLink::PixelFormat to_PixelFormat(const std::string & value);

    namespace PixelFormat_ {

        constexpr std::array<PixelFormat, 12> Values{
            PixelFormat::Unknown,
            PixelFormat::YUV_8Bit,
            PixelFormat::YUV_10Bit,
            PixelFormat::ARGB_8Bit,
            PixelFormat::BGRA_8Bit,
            PixelFormat::RGB_10Bit,
            PixelFormat::RGB_12Bit,
            PixelFormat::RGBLE_12Bit,
            PixelFormat::RGBXLE_10Bit,
            PixelFormat::RGBX_10Bit,
            PixelFormat::H265,
            PixelFormat::DNxHR,
        };

        std::string pretty_print(PixelFormat value);
        int get_depth(PixelFormat value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a PixelFormat to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_PixelFormat
 * 
 * @param value The PixelFormat to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::PixelFormat value);

std::ostream& operator<<(std::ostream& os, const DeckLink::PixelFormat value);

namespace DeckLink {

    enum class FieldDominance {
        Unknown = bmdUnknownFieldDominance,
        LowerFieldFirst = bmdLowerFieldFirst,
        UpperFieldFirst = bmdUpperFieldFirst,
        Progressive = bmdProgressiveFrame,
        ProgressiveSegmented = bmdProgressiveSegmentedFrame,
    };
    
    
    /**
     * Convert a std::string to a FieldDominance value.
     *
     * @param value The stringified version of an FieldDominance field to convert back to a FieldDominance.
     * @return The FieldDominance value.
     */
    DeckLink::FieldDominance to_FieldDominance(const std::string & value);

    namespace FieldDominance_ {

        constexpr std::array<FieldDominance, 5> Values{
            FieldDominance::Unknown,
            FieldDominance::LowerFieldFirst,
            FieldDominance::UpperFieldFirst,
            FieldDominance::Progressive,
            FieldDominance::ProgressiveSegmented,
        };

        std::string get_description(FieldDominance value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a FieldDominance to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_FieldDominance
 * 
 * @param value The FieldDominance to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::FieldDominance value);

std::ostream& operator<<(std::ostream& os, const DeckLink::FieldDominance value);

namespace DeckLink {

    enum class VideoInputFlags {
        Default = bmdVideoInputFlagDefault,
        EnableFormatDetection = bmdVideoInputEnableFormatDetection,
        DualStream3D = bmdVideoInputDualStream3D,
    };
    
    
    /**
     * Convert a std::string to a VideoInputFlags value.
     *
     * @param value The stringified version of an VideoInputFlags field to convert back to a VideoInputFlags.
     * @return The VideoInputFlags value.
     */
    DeckLink::VideoInputFlags to_VideoInputFlags(const std::string & value);

    namespace VideoInputFlags_ {

        constexpr std::array<VideoInputFlags, 3> Values{
            VideoInputFlags::Default,
            VideoInputFlags::EnableFormatDetection,
            VideoInputFlags::DualStream3D,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a VideoInputFlags to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_VideoInputFlags
 * 
 * @param value The VideoInputFlags to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::VideoInputFlags value);

std::ostream& operator<<(std::ostream& os, const DeckLink::VideoInputFlags value);

namespace DeckLink {

    enum class VideoOutputFlags {
        Default = bmdVideoOutputFlagDefault,
        VANC = bmdVideoOutputVANC,
        VITC = bmdVideoOutputVITC,
        RP188 = bmdVideoOutputRP188,
        DualStream3D = bmdVideoOutputDualStream3D,
    };
    
    
    /**
     * Convert a std::string to a VideoOutputFlags value.
     *
     * @param value The stringified version of an VideoOutputFlags field to convert back to a VideoOutputFlags.
     * @return The VideoOutputFlags value.
     */
    DeckLink::VideoOutputFlags to_VideoOutputFlags(const std::string & value);

    namespace VideoOutputFlags_ {

        constexpr std::array<VideoOutputFlags, 5> Values{
            VideoOutputFlags::Default,
            VideoOutputFlags::VANC,
            VideoOutputFlags::VITC,
            VideoOutputFlags::RP188,
            VideoOutputFlags::DualStream3D,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a VideoOutputFlags to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_VideoOutputFlags
 * 
 * @param value The VideoOutputFlags to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::VideoOutputFlags value);

std::ostream& operator<<(std::ostream& os, const DeckLink::VideoOutputFlags value);

namespace DeckLink {

    enum class AttributeType {
        Flag,
        Int,
        Float,
        String,
    };
    
    
    /**
     * Convert a std::string to a AttributeType value.
     *
     * @param value The stringified version of an AttributeType field to convert back to a AttributeType.
     * @return The AttributeType value.
     */
    DeckLink::AttributeType to_AttributeType(const std::string & value);

    namespace AttributeType_ {

        constexpr std::array<AttributeType, 4> Values{
            AttributeType::Flag,
            AttributeType::Int,
            AttributeType::Float,
            AttributeType::String,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a AttributeType to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_AttributeType
 * 
 * @param value The AttributeType to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::AttributeType value);

std::ostream& operator<<(std::ostream& os, const DeckLink::AttributeType value);

namespace DeckLink {

    enum class AttributeID {
        SupportsInternalKeying = BMDDeckLinkSupportsInternalKeying,
        SupportsExternalKeying = BMDDeckLinkSupportsExternalKeying,
        SupportsHDKeying = BMDDeckLinkSupportsHDKeying,
        SupportsInputFormatDetection = BMDDeckLinkSupportsInputFormatDetection,
        SupportsClockTimingAdjustment = BMDDeckLinkSupportsClockTimingAdjustment,
        SupportsFulDuplex = BMDDeckLinkSupportsFullDuplex,
        SupportsFullFrameReferenceTimingOffset = BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset,
        SupportsSMPTELevelOutput = BMDDeckLinkSupportsSMPTELevelAOutput,
        SupportsDualLinkSDI = BMDDeckLinkSupportsDualLinkSDI,
        SupportsQuadLinkSDI = BMDDeckLinkSupportsQuadLinkSDI,
        SupportsIdleOutput = BMDDeckLinkSupportsIdleOutput,
        SupportsDuplexModeConfiguration = BMDDeckLinkSupportsDuplexModeConfiguration,
        SupportsHDRMetaData = BMDDeckLinkSupportsHDRMetadata,
        HasReferenceInput = BMDDeckLinkHasReferenceInput,
        HasSerialPort = BMDDeckLinkHasSerialPort,
        HasAnalogVideoOutputGain = BMDDeckLinkHasAnalogVideoOutputGain,
        CanOnlyAdjustOverallVideoOutputGain = BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain,
        HasVideoInputAntiAliasingFilter = BMDDeckLinkHasVideoInputAntiAliasingFilter,
        HasBypass = BMDDeckLinkHasBypass,
        HasLTCTimecodeOutput = BMDDeckLinkHasLTCTimecodeInput,
        MaximumAudioChannels = BMDDeckLinkMaximumAudioChannels,
        MaximumAnalogAudioChannels = BMDDeckLinkMaximumAnalogAudioChannels,
        NumberOfSubDevices = BMDDeckLinkNumberOfSubDevices,
        SubDeviceIndex = BMDDeckLinkSubDeviceIndex,
        PersistentID = BMDDeckLinkPersistentID,
        PairedDevicePersistentID = BMDDeckLinkPairedDevicePersistentID,
        DeviceGroupID = BMDDeckLinkDeviceGroupID,
        TopologicalID = BMDDeckLinkTopologicalID,
        VideoOutputConnections = BMDDeckLinkVideoOutputConnections,
        VideoInputConnections = BMDDeckLinkVideoInputConnections,
        AudioOutputConnections = BMDDeckLinkAudioOutputConnections,
        AudioInputConnections = BMDDeckLinkAudioInputConnections,
        VideoIOSupport = BMDDeckLinkVideoIOSupport,
        ControlConnections = BMDDeckLinkDeckControlConnections,
        DeviceInterface = BMDDeckLinkDeviceInterface,
        VideoInputGainMinimum = BMDDeckLinkVideoInputGainMinimum,
        VideoInputGainMaximum = BMDDeckLinkVideoInputGainMaximum,
        VideoOutputGainMinimum = BMDDeckLinkVideoOutputGainMinimum,
        VideoOutputGainMaximum = BMDDeckLinkVideoOutputGainMaximum,
        MicrophoneInputGainMinimum = BMDDeckLinkMicrophoneInputGainMinimum,
        MicrophoneInputGainMaximum = BMDDeckLinkMicrophoneInputGainMaximum,
        SerialPortDeviceName = BMDDeckLinkSerialPortDeviceName,
        VendorName = BMDDeckLinkVendorName,
        DisplayName = BMDDeckLinkDisplayName,
        ModelName = BMDDeckLinkModelName,
    };
    
    
    /**
     * Convert a std::string to a AttributeID value.
     *
     * @param value The stringified version of an AttributeID field to convert back to a AttributeID.
     * @return The AttributeID value.
     */
    DeckLink::AttributeID to_AttributeID(const std::string & value);

    namespace AttributeID_ {

        constexpr std::array<AttributeID, 45> Values{
            AttributeID::SupportsInternalKeying,
            AttributeID::SupportsExternalKeying,
            AttributeID::SupportsHDKeying,
            AttributeID::SupportsInputFormatDetection,
            AttributeID::SupportsClockTimingAdjustment,
            AttributeID::SupportsFulDuplex,
            AttributeID::SupportsFullFrameReferenceTimingOffset,
            AttributeID::SupportsSMPTELevelOutput,
            AttributeID::SupportsDualLinkSDI,
            AttributeID::SupportsQuadLinkSDI,
            AttributeID::SupportsIdleOutput,
            AttributeID::SupportsDuplexModeConfiguration,
            AttributeID::SupportsHDRMetaData,
            AttributeID::HasReferenceInput,
            AttributeID::HasSerialPort,
            AttributeID::HasAnalogVideoOutputGain,
            AttributeID::CanOnlyAdjustOverallVideoOutputGain,
            AttributeID::HasVideoInputAntiAliasingFilter,
            AttributeID::HasBypass,
            AttributeID::HasLTCTimecodeOutput,
            AttributeID::MaximumAudioChannels,
            AttributeID::MaximumAnalogAudioChannels,
            AttributeID::NumberOfSubDevices,
            AttributeID::SubDeviceIndex,
            AttributeID::PersistentID,
            AttributeID::PairedDevicePersistentID,
            AttributeID::DeviceGroupID,
            AttributeID::TopologicalID,
            AttributeID::VideoOutputConnections,
            AttributeID::VideoInputConnections,
            AttributeID::AudioOutputConnections,
            AttributeID::AudioInputConnections,
            AttributeID::VideoIOSupport,
            AttributeID::ControlConnections,
            AttributeID::DeviceInterface,
            AttributeID::VideoInputGainMinimum,
            AttributeID::VideoInputGainMaximum,
            AttributeID::VideoOutputGainMinimum,
            AttributeID::VideoOutputGainMaximum,
            AttributeID::MicrophoneInputGainMinimum,
            AttributeID::MicrophoneInputGainMaximum,
            AttributeID::SerialPortDeviceName,
            AttributeID::VendorName,
            AttributeID::DisplayName,
            AttributeID::ModelName,
        };

        AttributeType get_value_type(AttributeID value);
        std::string get_explanation(AttributeID value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a AttributeID to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_AttributeID
 * 
 * @param value The AttributeID to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::AttributeID value);

std::ostream& operator<<(std::ostream& os, const DeckLink::AttributeID value);

namespace DeckLink {

    /**
     * Enumerates the set of configuration settings of a DeckLink device which
     * may be queried or set (see IDeckLinkConfiguration Interface for details)
     */
    enum class ConfigurationID {
        Use1080pNotPsF = bmdDeckLinkConfigUse1080pNotPsF,
        HDMI3DPackingFormat = bmdDeckLinkConfigHDMI3DPackingFormat,
        AnalogAudioConsumerLevels = bmdDeckLinkConfigAnalogAudioConsumerLevels,
        FieldFlickerRemoval = bmdDeckLinkConfigFieldFlickerRemoval,
        HD1080p24ToHD1080i5994Conversion = bmdDeckLinkConfigHD1080p24ToHD1080i5994Conversion,
        SDIVideoOutput444 = bmdDeckLinkConfig444SDIVideoOutput,
        BlackVideoOutputDuringCapture = bmdDeckLinkConfigBlackVideoOutputDuringCapture,
        ReferenceInputTimingOffset = bmdDeckLinkConfigReferenceInputTimingOffset,
        CapturePassThroughMode = bmdDeckLinkConfigCapturePassThroughMode,
        VideoOutputConnection = bmdDeckLinkConfigVideoOutputConnection,
        VideoOutputConversionMode = bmdDeckLinkConfigVideoOutputConversionMode,
        AnalogVideoOutputFlags = bmdDeckLinkConfigAnalogVideoOutputFlags,
        VideoInputConnection = bmdDeckLinkConfigVideoInputConnection,
        AnalogVideoInputFlags = bmdDeckLinkConfigAnalogVideoInputFlags,
        VideoInputConversionMode = bmdDeckLinkConfigVideoInputConversionMode,
        PulldownSequenceInitialTimecodeFrame = bmdDeckLinkConfig32PulldownSequenceInitialTimecodeFrame,
        VANCSourceLine1Mapping = bmdDeckLinkConfigVANCSourceLine1Mapping,
        VANCSourceLine2Mapping = bmdDeckLinkConfigVANCSourceLine2Mapping,
        VANCSourceLine3Mapping = bmdDeckLinkConfigVANCSourceLine3Mapping,
        AudioInputConnection = bmdDeckLinkConfigAudioInputConnection,
        AnalogAudioInputScaleChannel1 = bmdDeckLinkConfigAnalogAudioInputScaleChannel1,
        AnalogAudioInputScaleChannel2 = bmdDeckLinkConfigAnalogAudioInputScaleChannel2,
        AnalogAudioInputScaleChannel3 = bmdDeckLinkConfigAnalogAudioInputScaleChannel3,
        AnalogAudioInputScaleChannel4 = bmdDeckLinkConfigAnalogAudioInputScaleChannel4,
        DigitalAudioInputScale = bmdDeckLinkConfigDigitalAudioInputScale,
        AudioOutputAESAnalogSwitch = bmdDeckLinkConfigAudioOutputAESAnalogSwitch,
        AnalogAudioOutputScaleChannel1 = bmdDeckLinkConfigAnalogAudioOutputScaleChannel1,
        AnalogAudioOutputScaleChannel2 = bmdDeckLinkConfigAnalogAudioOutputScaleChannel2,
        AnalogAudioOutputScaleChannel3 = bmdDeckLinkConfigAnalogAudioOutputScaleChannel3,
        AnalogAudioOutputScaleChannel4 = bmdDeckLinkConfigAnalogAudioOutputScaleChannel4,
        DigitalAudioOutputScale = bmdDeckLinkConfigDigitalAudioOutputScale,
        DownConversionOnAllAnalogOutput = bmdDeckLinkConfigDownConversionOnAllAnalogOutput,
        SMPTELevelAOutput = bmdDeckLinkConfigSMPTELevelAOutput,
        DeviceInformationLabel = bmdDeckLinkConfigDeviceInformationLabel,
        DeviceInformationSerialNumber = bmdDeckLinkConfigDeviceInformationSerialNumber,
        DeviceInformationCompany = bmdDeckLinkConfigDeviceInformationCompany,
        DeviceInformationPhone = bmdDeckLinkConfigDeviceInformationPhone,
        DeviceInformationEmail = bmdDeckLinkConfigDeviceInformationEmail,
        DeviceInformationDate = bmdDeckLinkConfigDeviceInformationDate,
        VideoOutputIdleOperation = bmdDeckLinkConfigVideoOutputIdleOperation,
        SwapSerialRxTx = bmdDeckLinkConfigSwapSerialRxTx,
        Bypass = bmdDeckLinkConfigBypass,
        ClockTimingAdjustment = bmdDeckLinkConfigClockTimingAdjustment,
        VideoInputScanning = bmdDeckLinkConfigVideoInputScanning,
        UseDedicatedLTCInput = bmdDeckLinkConfigUseDedicatedLTCInput,
        DefaultVideoOutputMode = bmdDeckLinkConfigDefaultVideoOutputMode,
        DefaultVideoOutputModeFlags = bmdDeckLinkConfigDefaultVideoOutputModeFlags,
        SDIOutputLinkConfiguration = bmdDeckLinkConfigSDIOutputLinkConfiguration,
        VideoOutputComponentLumaGain = bmdDeckLinkConfigVideoOutputComponentLumaGain,
        VideoOutputComponentChromaBlueGain = bmdDeckLinkConfigVideoOutputComponentChromaBlueGain,
        VideoOutputComponentChromaRedGain = bmdDeckLinkConfigVideoOutputComponentChromaRedGain,
        VideoOutputCompositeLumaGain = bmdDeckLinkConfigVideoOutputCompositeLumaGain,
        VideoOutputCompositeChromaGain = bmdDeckLinkConfigVideoOutputCompositeChromaGain,
        VideoOutputSVideoLumaGain = bmdDeckLinkConfigVideoOutputSVideoLumaGain,
        VideoOutputSVideoChromaGain = bmdDeckLinkConfigVideoOutputSVideoChromaGain,
        VideoInputComponentLumaGain = bmdDeckLinkConfigVideoInputComponentLumaGain,
        VideoInputComponentChromaBlueGain = bmdDeckLinkConfigVideoInputComponentChromaBlueGain,
        VideoInputComponentChromaRedGain = bmdDeckLinkConfigVideoInputComponentChromaRedGain,
        VideoInputCompositeLumaGain = bmdDeckLinkConfigVideoInputCompositeLumaGain,
        VideoInputCompositeChromaGain = bmdDeckLinkConfigVideoInputCompositeChromaGain,
        VideoInputSVideoLumaGain = bmdDeckLinkConfigVideoInputSVideoLumaGain,
        VideoInputSVideoChromaGain = bmdDeckLinkConfigVideoInputSVideoChromaGain,
        MicrophonePhantomPower = bmdDeckLinkConfigMicrophonePhantomPower,
        MicrophoneInputGain = bmdDeckLinkConfigMicrophoneInputGain,
        HeadphoneVolume = bmdDeckLinkConfigHeadphoneVolume,
        DeckControlConnection = bmdDeckLinkConfigDeckControlConnection,
        SDIInput3DPayloadOverride = bmdDeckLinkConfigSDIInput3DPayloadOverride,
        DuplexMode = bmdDeckLinkConfigDuplexMode,
    };
    
    
    /**
     * Convert a std::string to a ConfigurationID value.
     *
     * @param value The stringified version of an ConfigurationID field to convert back to a ConfigurationID.
     * @return The ConfigurationID value.
     */
    DeckLink::ConfigurationID to_ConfigurationID(const std::string & value);

    namespace ConfigurationID_ {

        constexpr std::array<ConfigurationID, 68> Values{
            ConfigurationID::Use1080pNotPsF,
            ConfigurationID::HDMI3DPackingFormat,
            ConfigurationID::AnalogAudioConsumerLevels,
            ConfigurationID::FieldFlickerRemoval,
            ConfigurationID::HD1080p24ToHD1080i5994Conversion,
            ConfigurationID::SDIVideoOutput444,
            ConfigurationID::BlackVideoOutputDuringCapture,
            ConfigurationID::ReferenceInputTimingOffset,
            ConfigurationID::CapturePassThroughMode,
            ConfigurationID::VideoOutputConnection,
            ConfigurationID::VideoOutputConversionMode,
            ConfigurationID::AnalogVideoOutputFlags,
            ConfigurationID::VideoInputConnection,
            ConfigurationID::AnalogVideoInputFlags,
            ConfigurationID::VideoInputConversionMode,
            ConfigurationID::PulldownSequenceInitialTimecodeFrame,
            ConfigurationID::VANCSourceLine1Mapping,
            ConfigurationID::VANCSourceLine2Mapping,
            ConfigurationID::VANCSourceLine3Mapping,
            ConfigurationID::AudioInputConnection,
            ConfigurationID::AnalogAudioInputScaleChannel1,
            ConfigurationID::AnalogAudioInputScaleChannel2,
            ConfigurationID::AnalogAudioInputScaleChannel3,
            ConfigurationID::AnalogAudioInputScaleChannel4,
            ConfigurationID::DigitalAudioInputScale,
            ConfigurationID::AudioOutputAESAnalogSwitch,
            ConfigurationID::AnalogAudioOutputScaleChannel1,
            ConfigurationID::AnalogAudioOutputScaleChannel2,
            ConfigurationID::AnalogAudioOutputScaleChannel3,
            ConfigurationID::AnalogAudioOutputScaleChannel4,
            ConfigurationID::DigitalAudioOutputScale,
            ConfigurationID::DownConversionOnAllAnalogOutput,
            ConfigurationID::SMPTELevelAOutput,
            ConfigurationID::DeviceInformationLabel,
            ConfigurationID::DeviceInformationSerialNumber,
            ConfigurationID::DeviceInformationCompany,
            ConfigurationID::DeviceInformationPhone,
            ConfigurationID::DeviceInformationEmail,
            ConfigurationID::DeviceInformationDate,
            ConfigurationID::VideoOutputIdleOperation,
            ConfigurationID::SwapSerialRxTx,
            ConfigurationID::Bypass,
            ConfigurationID::ClockTimingAdjustment,
            ConfigurationID::VideoInputScanning,
            ConfigurationID::UseDedicatedLTCInput,
            ConfigurationID::DefaultVideoOutputMode,
            ConfigurationID::DefaultVideoOutputModeFlags,
            ConfigurationID::SDIOutputLinkConfiguration,
            ConfigurationID::VideoOutputComponentLumaGain,
            ConfigurationID::VideoOutputComponentChromaBlueGain,
            ConfigurationID::VideoOutputComponentChromaRedGain,
            ConfigurationID::VideoOutputCompositeLumaGain,
            ConfigurationID::VideoOutputCompositeChromaGain,
            ConfigurationID::VideoOutputSVideoLumaGain,
            ConfigurationID::VideoOutputSVideoChromaGain,
            ConfigurationID::VideoInputComponentLumaGain,
            ConfigurationID::VideoInputComponentChromaBlueGain,
            ConfigurationID::VideoInputComponentChromaRedGain,
            ConfigurationID::VideoInputCompositeLumaGain,
            ConfigurationID::VideoInputCompositeChromaGain,
            ConfigurationID::VideoInputSVideoLumaGain,
            ConfigurationID::VideoInputSVideoChromaGain,
            ConfigurationID::MicrophonePhantomPower,
            ConfigurationID::MicrophoneInputGain,
            ConfigurationID::HeadphoneVolume,
            ConfigurationID::DeckControlConnection,
            ConfigurationID::SDIInput3DPayloadOverride,
            ConfigurationID::DuplexMode,
        };

        std::string get_description(ConfigurationID value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a ConfigurationID to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_ConfigurationID
 * 
 * @param value The ConfigurationID to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::ConfigurationID value);

std::ostream& operator<<(std::ostream& os, const DeckLink::ConfigurationID value);

namespace DeckLink {

    enum class StatusID {
        DetectedVideoInputMode = bmdDeckLinkStatusDetectedVideoInputMode,
        DetectedVideoInputFlags = bmdDeckLinkStatusDetectedVideoInputFlags,
        CurrentVideoInputMode = bmdDeckLinkStatusCurrentVideoInputMode,
        CurrentVideoInputPixelFormat = bmdDeckLinkStatusCurrentVideoInputPixelFormat,
        CurrentVideoInputFlags = bmdDeckLinkStatusCurrentVideoInputFlags,
        CurrentVideoOutputMode = bmdDeckLinkStatusCurrentVideoOutputMode,
        CurrentVideoOutputFlags = bmdDeckLinkStatusCurrentVideoOutputFlags,
        PCIExpressLinkWidth = bmdDeckLinkStatusPCIExpressLinkWidth,
        PCIExpressLinkSpeed = bmdDeckLinkStatusPCIExpressLinkSpeed,
        LastVideoOutputPixelFormat = bmdDeckLinkStatusLastVideoOutputPixelFormat,
        ReferenceSignalMode = bmdDeckLinkStatusReferenceSignalMode,
        DuplexMode = bmdDeckLinkStatusDuplexMode,
        BusyState = bmdDeckLinkStatusBusy,
        VideoInputSignalLocked = bmdDeckLinkStatusVideoInputSignalLocked,
        ReferenceSignalLocked = bmdDeckLinkStatusReferenceSignalLocked,
        ReferenceSignalFlags = bmdDeckLinkStatusReferenceSignalFlags,
    };
    
    
    /**
     * Convert a std::string to a StatusID value.
     *
     * @param value The stringified version of an StatusID field to convert back to a StatusID.
     * @return The StatusID value.
     */
    DeckLink::StatusID to_StatusID(const std::string & value);

    namespace StatusID_ {

        constexpr std::array<StatusID, 16> Values{
            StatusID::DetectedVideoInputMode,
            StatusID::DetectedVideoInputFlags,
            StatusID::CurrentVideoInputMode,
            StatusID::CurrentVideoInputPixelFormat,
            StatusID::CurrentVideoInputFlags,
            StatusID::CurrentVideoOutputMode,
            StatusID::CurrentVideoOutputFlags,
            StatusID::PCIExpressLinkWidth,
            StatusID::PCIExpressLinkSpeed,
            StatusID::LastVideoOutputPixelFormat,
            StatusID::ReferenceSignalMode,
            StatusID::DuplexMode,
            StatusID::BusyState,
            StatusID::VideoInputSignalLocked,
            StatusID::ReferenceSignalLocked,
            StatusID::ReferenceSignalFlags,
        };

        std::string get_description(StatusID value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a StatusID to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_StatusID
 * 
 * @param value The StatusID to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::StatusID value);

std::ostream& operator<<(std::ostream& os, const DeckLink::StatusID value);

namespace DeckLink {

    enum class InputFormatFlag {
        YCbCr422 = bmdDetectedVideoInputYCbCr422,
        RGB444 = bmdDetectedVideoInputRGB444,
        DualStream3D = bmdDetectedVideoInputDualStream3D,
    };
    
    
    /**
     * Convert a std::string to a InputFormatFlag value.
     *
     * @param value The stringified version of an InputFormatFlag field to convert back to a InputFormatFlag.
     * @return The InputFormatFlag value.
     */
    DeckLink::InputFormatFlag to_InputFormatFlag(const std::string & value);

    namespace InputFormatFlag_ {

        constexpr std::array<InputFormatFlag, 3> Values{
            InputFormatFlag::YCbCr422,
            InputFormatFlag::RGB444,
            InputFormatFlag::DualStream3D,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a InputFormatFlag to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_InputFormatFlag
 * 
 * @param value The InputFormatFlag to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::InputFormatFlag value);

std::ostream& operator<<(std::ostream& os, const DeckLink::InputFormatFlag value);

namespace DeckLink {

    enum class DisplayModeFlags {
        Supports3D = bmdDisplayModeSupports3D,
        ColorspaceRec601 = bmdDisplayModeColorspaceRec601,
        ColorspaceRec709 = bmdDisplayModeColorspaceRec709,
    };
    
    
    /**
     * Convert a std::string to a DisplayModeFlags value.
     *
     * @param value The stringified version of an DisplayModeFlags field to convert back to a DisplayModeFlags.
     * @return The DisplayModeFlags value.
     */
    DeckLink::DisplayModeFlags to_DisplayModeFlags(const std::string & value);

    namespace DisplayModeFlags_ {

        constexpr std::array<DisplayModeFlags, 3> Values{
            DisplayModeFlags::Supports3D,
            DisplayModeFlags::ColorspaceRec601,
            DisplayModeFlags::ColorspaceRec709,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a DisplayModeFlags to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_DisplayModeFlags
 * 
 * @param value The DisplayModeFlags to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::DisplayModeFlags value);

std::ostream& operator<<(std::ostream& os, const DeckLink::DisplayModeFlags value);

namespace DeckLink {

    enum class DisplayModeSupport {
        NotSupported = bmdDisplayModeNotSupported,
        Supported = bmdDisplayModeSupported,
        SupportedWithConversion = bmdDisplayModeSupportedWithConversion,
    };
    
    
    /**
     * Convert a std::string to a DisplayModeSupport value.
     *
     * @param value The stringified version of an DisplayModeSupport field to convert back to a DisplayModeSupport.
     * @return The DisplayModeSupport value.
     */
    DeckLink::DisplayModeSupport to_DisplayModeSupport(const std::string & value);

    namespace DisplayModeSupport_ {

        constexpr std::array<DisplayModeSupport, 3> Values{
            DisplayModeSupport::NotSupported,
            DisplayModeSupport::Supported,
            DisplayModeSupport::SupportedWithConversion,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a DisplayModeSupport to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_DisplayModeSupport
 * 
 * @param value The DisplayModeSupport to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::DisplayModeSupport value);

std::ostream& operator<<(std::ostream& os, const DeckLink::DisplayModeSupport value);

namespace DeckLink {

    enum class TimecodeFormat {
        RP188VITC1 = bmdTimecodeRP188VITC1,
        RP188VITC2 = bmdTimecodeRP188VITC2,
        RP188LTC = bmdTimecodeRP188LTC,
        RP188Any = bmdTimecodeRP188Any,
        VITC = bmdTimecodeVITC,
        VITCField2 = bmdTimecodeVITCField2,
        Serial = bmdTimecodeSerial,
    };
    
    
    /**
     * Convert a std::string to a TimecodeFormat value.
     *
     * @param value The stringified version of an TimecodeFormat field to convert back to a TimecodeFormat.
     * @return The TimecodeFormat value.
     */
    DeckLink::TimecodeFormat to_TimecodeFormat(const std::string & value);

    namespace TimecodeFormat_ {

        constexpr std::array<TimecodeFormat, 7> Values{
            TimecodeFormat::RP188VITC1,
            TimecodeFormat::RP188VITC2,
            TimecodeFormat::RP188LTC,
            TimecodeFormat::RP188Any,
            TimecodeFormat::VITC,
            TimecodeFormat::VITCField2,
            TimecodeFormat::Serial,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a TimecodeFormat to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_TimecodeFormat
 * 
 * @param value The TimecodeFormat to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::TimecodeFormat value);

std::ostream& operator<<(std::ostream& os, const DeckLink::TimecodeFormat value);

namespace DeckLink {

    enum class TimecodeFlags {
        FlagDefault = bmdTimecodeFlagDefault,
        IsDropFrame = bmdTimecodeIsDropFrame,
        FieldMark = bmdTimecodeFieldMark,
    };
    
    
    /**
     * Convert a std::string to a TimecodeFlags value.
     *
     * @param value The stringified version of an TimecodeFlags field to convert back to a TimecodeFlags.
     * @return The TimecodeFlags value.
     */
    DeckLink::TimecodeFlags to_TimecodeFlags(const std::string & value);

    namespace TimecodeFlags_ {

        constexpr std::array<TimecodeFlags, 3> Values{
            TimecodeFlags::FlagDefault,
            TimecodeFlags::IsDropFrame,
            TimecodeFlags::FieldMark,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a TimecodeFlags to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_TimecodeFlags
 * 
 * @param value The TimecodeFlags to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::TimecodeFlags value);

std::ostream& operator<<(std::ostream& os, const DeckLink::TimecodeFlags value);

namespace DeckLink {

    enum class BusyState {
        NotBusy,
        CaptureBusy = bmdDeviceCaptureBusy,
        PlaybackBusy = bmdDevicePlaybackBusy,
        SerialPortBusy = bmdDeviceSerialPortBusy,
    };
    
    
    /**
     * Convert a std::string to a BusyState value.
     *
     * @param value The stringified version of an BusyState field to convert back to a BusyState.
     * @return The BusyState value.
     */
    DeckLink::BusyState to_BusyState(const std::string & value);

    namespace BusyState_ {

        constexpr std::array<BusyState, 4> Values{
            BusyState::NotBusy,
            BusyState::CaptureBusy,
            BusyState::PlaybackBusy,
            BusyState::SerialPortBusy,
        };

        std::string get_description(BusyState value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a BusyState to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_BusyState
 * 
 * @param value The BusyState to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::BusyState value);

std::ostream& operator<<(std::ostream& os, const DeckLink::BusyState value);

namespace DeckLink {

    enum class InputFormatChangedEvent {
        DisplayModeChanged = bmdVideoInputDisplayModeChanged,
        FieldDominanceChanged = bmdVideoInputFieldDominanceChanged,
        ColorspaceChanged = bmdVideoInputColorspaceChanged,
    };
    
    
    /**
     * Convert a std::string to a InputFormatChangedEvent value.
     *
     * @param value The stringified version of an InputFormatChangedEvent field to convert back to a InputFormatChangedEvent.
     * @return The InputFormatChangedEvent value.
     */
    DeckLink::InputFormatChangedEvent to_InputFormatChangedEvent(const std::string & value);

    namespace InputFormatChangedEvent_ {

        constexpr std::array<InputFormatChangedEvent, 3> Values{
            InputFormatChangedEvent::DisplayModeChanged,
            InputFormatChangedEvent::FieldDominanceChanged,
            InputFormatChangedEvent::ColorspaceChanged,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a InputFormatChangedEvent to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_InputFormatChangedEvent
 * 
 * @param value The InputFormatChangedEvent to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::InputFormatChangedEvent value);

std::ostream& operator<<(std::ostream& os, const DeckLink::InputFormatChangedEvent value);

namespace DeckLink {

    enum class DetectedVideoInputFormatFlags {
        YCbCr422 = bmdDetectedVideoInputYCbCr422,
        RGB444 = bmdDetectedVideoInputRGB444,
        DualStream3D = bmdDetectedVideoInputDualStream3D,
    };
    
    
    /**
     * Convert a std::string to a DetectedVideoInputFormatFlags value.
     *
     * @param value The stringified version of an DetectedVideoInputFormatFlags field to convert back to a DetectedVideoInputFormatFlags.
     * @return The DetectedVideoInputFormatFlags value.
     */
    DeckLink::DetectedVideoInputFormatFlags to_DetectedVideoInputFormatFlags(const std::string & value);

    namespace DetectedVideoInputFormatFlags_ {

        constexpr std::array<DetectedVideoInputFormatFlags, 3> Values{
            DetectedVideoInputFormatFlags::YCbCr422,
            DetectedVideoInputFormatFlags::RGB444,
            DetectedVideoInputFormatFlags::DualStream3D,
        };

        std::string pretty_print(DetectedVideoInputFormatFlags value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a DetectedVideoInputFormatFlags to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_DetectedVideoInputFormatFlags
 * 
 * @param value The DetectedVideoInputFormatFlags to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::DetectedVideoInputFormatFlags value);

std::ostream& operator<<(std::ostream& os, const DeckLink::DetectedVideoInputFormatFlags value);

namespace DeckLink {

    enum class DuplexMode {
        Full = bmdDuplexStatusFullDuplex,
        Half = bmdDuplexStatusHalfDuplex,
        Simplex = bmdDuplexStatusSimplex,
        Inactive = bmdDuplexStatusInactive,
    };
    
    
    /**
     * Convert a std::string to a DuplexMode value.
     *
     * @param value The stringified version of an DuplexMode field to convert back to a DuplexMode.
     * @return The DuplexMode value.
     */
    DeckLink::DuplexMode to_DuplexMode(const std::string & value);

    namespace DuplexMode_ {

        constexpr std::array<DuplexMode, 4> Values{
            DuplexMode::Full,
            DuplexMode::Half,
            DuplexMode::Simplex,
            DuplexMode::Inactive,
        };

        std::string get_description(DuplexMode value);

    }
    
} // end namespace DeckLink

/** 
 * Convert a DuplexMode to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_DuplexMode
 * 
 * @param value The DuplexMode to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::DuplexMode value);

std::ostream& operator<<(std::ostream& os, const DeckLink::DuplexMode value);

namespace DeckLink {

    enum class HResult {
        Ok = S_OK,
        False = S_FALSE,
        Unexpected = E_UNEXPECTED,
        NotImplemented = E_NOTIMPL,
        OutOfMemory = E_OUTOFMEMORY,
        InvalidArg = E_INVALIDARG,
        NoInterface = E_NOINTERFACE,
        Pointer = E_POINTER,
        Handle = E_HANDLE,
        Abort = E_ABORT,
        Fail = E_FAIL,
        AccessDenied = E_ACCESSDENIED,
    };
    
    
    /**
     * Convert a std::string to a HResult value.
     *
     * @param value The stringified version of an HResult field to convert back to a HResult.
     * @return The HResult value.
     */
    DeckLink::HResult to_HResult(const std::string & value);

    namespace HResult_ {

        constexpr std::array<HResult, 12> Values{
            HResult::Ok,
            HResult::False,
            HResult::Unexpected,
            HResult::NotImplemented,
            HResult::OutOfMemory,
            HResult::InvalidArg,
            HResult::NoInterface,
            HResult::Pointer,
            HResult::Handle,
            HResult::Abort,
            HResult::Fail,
            HResult::AccessDenied,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a HResult to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_HResult
 * 
 * @param value The HResult to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::HResult value);

std::ostream& operator<<(std::ostream& os, const DeckLink::HResult value);

namespace DeckLink {

    enum class CaptureDelegateError {
        Ok,
        EmptyFrameReceived = 1,
        EmptyVideoStream = 2,
        PixelFormatConversionError = 3,
    };
    
    
    /**
     * Convert a std::string to a CaptureDelegateError value.
     *
     * @param value The stringified version of an CaptureDelegateError field to convert back to a CaptureDelegateError.
     * @return The CaptureDelegateError value.
     */
    DeckLink::CaptureDelegateError to_CaptureDelegateError(const std::string & value);

    namespace CaptureDelegateError_ {

        constexpr std::array<CaptureDelegateError, 4> Values{
            CaptureDelegateError::Ok,
            CaptureDelegateError::EmptyFrameReceived,
            CaptureDelegateError::EmptyVideoStream,
            CaptureDelegateError::PixelFormatConversionError,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a CaptureDelegateError to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_CaptureDelegateError
 * 
 * @param value The CaptureDelegateError to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::CaptureDelegateError value);

std::ostream& operator<<(std::ostream& os, const DeckLink::CaptureDelegateError value);

namespace DeckLink {

    enum class VideoInputError {
        NullFrame,
        NoInputSource,
    };
    
    
    /**
     * Convert a std::string to a VideoInputError value.
     *
     * @param value The stringified version of an VideoInputError field to convert back to a VideoInputError.
     * @return The VideoInputError value.
     */
    DeckLink::VideoInputError to_VideoInputError(const std::string & value);

    namespace VideoInputError_ {

        constexpr std::array<VideoInputError, 2> Values{
            VideoInputError::NullFrame,
            VideoInputError::NoInputSource,
        };


    }
    
} // end namespace DeckLink

/** 
 * Convert a VideoInputError to a std::string
 *
 * The generated string is simply a stringification of the name of the enum value. It can be used to
 * to and from the enum in conjunction with DeckLink::to_VideoInputError
 * 
 * @param value The VideoInputError to convert
 * @return A stringified representation of \p value
 */
std::string to_string(const DeckLink::VideoInputError value);

std::ostream& operator<<(std::ostream& os, const DeckLink::VideoInputError value);

 